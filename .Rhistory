#    scale_colour_manual(values=cPalette, name="Year") +
ylab("Volume") +
geom_line(data = df26means, size = 1.25, color = "black")
ggplot(data=df26, aes(x=Month, y=C1, colour=factor(Year))) +
geom_line(aes(group = Year), size=.75) + geom_point() +
scale_x_discrete(limits=c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
scale_y_continuous(labels=comma) +
#    scale_colour_manual(values=cPalette, name="Year") +
ylab("Volume") +
geom_line(data = df26means, size = 1.25, color = "black", group = 1)
ggplot(data=df26, aes(x=Month, y=C1, colour=factor(Year))) +
geom_line(aes(group = Year), size=.75) + geom_point() +
scale_x_discrete(limits=c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
scale_y_continuous(labels=comma) +
#    scale_colour_manual(values=cPalette, name="Year") +
ylab("Volume")
ggplot(data=df26, aes(x=Month, y=C1, colour=factor(Year))) +
geom_line(aes(group = Year), size=.75) + geom_point() +
scale_x_discrete(limits=c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
scale_y_continuous(labels=comma) +
#    scale_colour_manual(values=cPalette, name="Year") +
ylab("Volume") +
geom_line(data = df26means, size = 1.25, color = "black", group = 1)
ggplot(data=df26, aes(x=Month, y=C1, colour=factor(Year))) +
geom_line(size=.75) + geom_point() +
scale_x_discrete(limits=c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
scale_y_continuous(labels=comma) +
#    scale_colour_manual(values=cPalette, name="Year") +
ylab("Volume") +
geom_line(data = df26means, size = 1.25, color = "black")
df26$Year <- factor(df26$Year)
ggplot(data=df26, aes(x=Month, y=C1, colour=Year)) +
geom_line(size=.75) + geom_point() +
scale_x_discrete(limits=c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
scale_y_continuous(labels=comma) +
#    scale_colour_manual(values=cPalette, name="Year") +
ylab("Volume")
library(pocr)
library(RODBC)
library(mstate)
library(dplyr)
library(magrittr)
library(caret)
load("S:/AOC/Data/data_for_modeling.Rdata")
head(dat.to.fit.dep)
set.seed(47)
dep.fold <- dat.to.fit.dep %>% filter(status == 1) %>% select(id.prsn.child, trans) %>%
mutate(fold = createFolds(trans, k = 2, list = FALSE)) %>%
select(-trans) %>%
left_join(dat.to.fit.dep)
test.dat <- filter(dep.fold, fold == 2)
train.dat <- filter(dep.fold, fold < 2)
cause_specific <- function(x) {
x <- paste(x, 1:3, sep = ".")
x <- paste(x, collapse = " + ")
return(x)
}
cov.df <- cbind.data.frame(cov.names, sapply(cov.names, cause_specific), stringsAsFactors = FALSE)
names(cov.df)[2] <- "cause.specific.names"
#cov.names
expanded.names <- data.frame(exp = names(dep.fold)[35:ncol(dep.fold)])
expanded.names$base <- NA
for (cov in c(cov.names, geo.options)) {
expanded.names$base[str_detect(expanded.names$exp, pattern = cov)] <- cov
}
expanded.names %<>% group_by(base) %>%
dplyr::summarize(exp.form = paste(exp, collapse = " + "))
fit.exp.names <- filter(expanded.names, base != "region") # can try out geo options this way
form.start <- "Surv(Tstart, Tstop, status) ~"
form.end <- "+ strata(trans)"
fit.exp.names
fit.exp.names[, 2]
load("S:/AOC/Data/cv_results_court.Rdata")
cv.results
cause_specific <- function(x) {
x <- paste(x, 1:3, sep = ".")
x <- paste(x, collapse = " + ")
return(x)
}
cov.df <- cbind.data.frame(cov.names, sapply(cov.names, cause_specific), stringsAsFactors = FALSE)
names(cov.df)[2] <- "cause.specific.names"
#cov.names
expanded.names <- data.frame(exp = names(dep.fold)[35:ncol(dep.fold)])
expanded.names$base <- NA
for (cov in c(cov.names, geo.options)) {
expanded.names$base[str_detect(expanded.names$exp, pattern = cov)] <- cov
}
expanded.names %<>% group_by(base) %>%
dplyr::summarize(exp.form = paste(exp, collapse = " + "))
fit.exp.names <- filter(expanded.names, base != "region") # can try out geo options this way
form.start <- "Surv(Tstart, Tstop, status) ~"
form.end <- "+ strata(trans)"
# ----
#### EQ: no transition specific covariates. Train and test:
# ----
form.body.eq <- paste(fit.exp.names[["base"]], collapse = " + ")
train.mod.eq <- coxph(as.formula(paste(form.start, form.body.eq, form.end)),
data = train.dat, method = "breslow")
off.eq <- predict(train.mod.eq, newdata = test.dat, type = "lp")
eq.form.off <- "+ offset(off.eq)"
test.eq <- coxph(as.formula(paste(form.start, eq.body, form.end, eq.form.off)),
data = test.dat, method = "breslow")
test.eq.ll <- test.eq$loglik[1]
# ----
#### TS: Train model then get test ll, for each variable
# ----
fit.exp.names$testll <- NA
fit.exp.names$train.warn <- NA
fit.exp.names$test.warn <- NA
var.row = 1
form.body <- paste(c(fit.exp.names[-var.row, "base"], fit.exp.names[var.row, "exp.form"]), collapse = " + ")
this.formula <- as.formula(paste(form.start, form.body, form.end))
this.formula
fit.exp.names[, 2]
?splinefun
i = 1
olddir <- "S:/Data Portal/mapping/old_data/"
newdir <- "S:/Data Portal/mapping/data_for_upload/"
mapfiles <- list.files(path = olddir, pattern = "*csv")
x <- read.csv(paste0(olddir, mapfiles[i]))
x$datacol <- round(x$datacol, 1)
names(x)
head(x)
rev(head(x))
x <- x[nrow(x):1, ]
head(x)
?sort
?order
for (i in seq_along(mapfiles)) {
x <- read.csv(paste0(olddir, mapfiles[i]))
print(mapfiles[i])
dim(x)
cat("\n")
}
for (i in seq_along(mapfiles)) {
x <- read.csv(paste0(olddir, mapfiles[i]))
print(mapfiles[i])
print(dim(x))
cat("\n")
}
head(x)
head(x[1])
ncol <- sample(4:6, size = 1)
dat <- cbind.data.frame(sample(letters, size = 10), matrix(runif(ncol * 10), ncol = ncol))
dat
names(dat) <- paste0("V", 1:ncol)
dat
set.seed(47)
data.list <- replicate(n = 10, expr = {
ncol <- sample(4:6, size = 1)
dat <- cbind.data.frame(sample(letters, size = 10), matrix(runif(ncol * 10), ncol = ncol))
names(dat) <- paste0("V", 1:ncol)
})
lapply(data.list, dim)
data.list <- replicate(n = 10, expr = {
ncol <- sample(4:6, size = 1)
dat <- cbind.data.frame(sample(letters, size = 10), matrix(runif(ncol * 10), ncol = ncol))
names(dat) <- paste0("V", 1:ncol)
dat
})
lapply(data.list, dim)
x <- read.csv(paste0(olddir, mapfiles[i]))
x$datacol <- round(x$datacol, 1)
head(x)
xx <- x[, -ncol(x)]
xx[, 2:ncol(xx)] <- -1 * [, 2:ncol(xx)]
xx[, 2:ncol(xx)] <- -1 * xx[, 2:ncol(xx)]
head(xx)
do.call(order, xx)
dim(xx)
length(do.call(order, xx))
olddir <- "S:/Data Portal/mapping/old_data/"
newdir <- "S:/Data Portal/mapping/data_for_upload/"
mapfiles <- list.files(path = olddir, pattern = "*csv")
for (i in seq_along(mapfiles)) {
x <- read.csv(paste0(olddir, mapfiles[i]))
xx <- x[, -ncol(x)]
xx[, 2:ncol(xx)] <- -1 * xx[, 2:ncol(xx)]
x <- x[do.call(order, xx), ]
x$datacol <- round(x$datacol, 1)
x$start_date <- paste0('"', x$start_date, '"')
write.csv(x, file = paste0(newdir, mapfiles[i]), row.names = FALSE, quote = F)
}
for (i in seq_along(mapfiles)) {
x <- read.csv(paste0(olddir, mapfiles[i]))
xx <- x[, -ncol(x)]
xx[, 2:ncol(xx)] <- -1 * xx[, 2:ncol(xx)]
x <- x[do.call(order, xx, decreasing = T), ]
x$datacol <- round(x$datacol, 1)
x$start_date <- paste0('"', x$start_date, '"')
write.csv(x, file = paste0(newdir, mapfiles[i]), row.names = FALSE, quote = F)
}
?do.call
head(xx)
yy = as.list(xx)
class(yy)
yy <- c(yy, decreasing = TRUE)
length(yy)
yy[[6]]
head(yy[[5]])
for (i in seq_along(mapfiles)) {
x <- read.csv(paste0(olddir, mapfiles[i]))
xx <- x[, -ncol(x)]
xx[, 2:ncol(xx)] <- -1 * xx[, 2:ncol(xx)]
xx <- as.list(xx)
x <- x[do.call(order, c(xx, decreasing = TRUE)), ]
x$datacol <- round(x$datacol, 1)
x$start_date <- paste0('"', x$start_date, '"')
write.csv(x, file = paste0(newdir, mapfiles[i]), row.names = FALSE, quote = F)
}
library(RCurl)
mapfiles
i
ftpUpload(what = paste0(newdir, mapfiles[i]),
to = paste0("sftp://gregorp:Obama the surfer@pocweb.cac.washington.edu/data/pocweb/www-test/maps/data/ooh",
mapfiles[i]))
dat <- read.table("clipboard", header = T)
head(dat)
x <- read.table("clipboard", header =T)
x <- filter(dat, person == "Alex")
x
diff(x$level)
?lst
?last
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level > 0)))
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level) > 0))
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level) > 0)) %>%
filter(inc)
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level) > 0)) %>%
filter(inc) %>%
summarize(last_increase = last(date))
dat$date <- as.Date(dat$Date)
dat
dat$date <- as.Date(dat$date)
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level) > 0)) %>%
filter(inc) %>%
summarize(last_increase = last(date))
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level) > 0)) %>%
filter(inc) %>%
summarize(last_increase = as.Date(last(date)))
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level) > 0)) %>%
filter(inc) %>%
summarize(last_increase = as.Date(last(date), origin = "1970-01-01"))
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level) > 0)) %>%
summarize(last_increase = ifelse(any(inc), as.Date(last(date[inc]), origin = "1970-01-01"), NA))
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level) > 0)) %>%
summarize(last_increase = as.Date(ifelse(any(inc), last(date[inc]), NA), origin = "1970-01-01"))
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level) > 0)) %>%
summarize(date = last(date[inc]))
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level) > 0)) %>%
summarize(date = last(date[inc], default = NA))
fortunes::fortune
fotunes::fortune("possible", showMatches = T)
fortunes::fortune("possible", showMatches = T)
fortunes::fortune("is possible", showMatches = T)
fortunes::fortune("have learned", showMatches = T)
fortunes::fortune("question is not", showMatches = T)
dat <- read.table("clipboard", header = T)
library(dplyr)
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level) > 0)) %>%
summarize(date = last(date[inc], default = NA))
library(plyr)
dat %>% group_by(person) %>%
mutate(inc = c(F, diff(level) > 0)) %>%
summarize(date = last(date[inc], default = NA))
?summarize
dat %>% group_by(person) %>%
dplyr::mutate(inc = c(F, diff(level) > 0)) %>%
plyr::summarize(date = last(date[inc], default = NA))
?summarize
dat %>% group_by(person) %>%
dplyr::mutate(inc = c(F, diff(level) > 0)) %>%
Hmisc::summarize(date = last(date[inc], default = NA))
pretty
pretty.numeric
methods(generic.function = "pretty")
pretty.default
?na.locf
?zoo::na.locf
df <- structure(list(Col1 = c("Name1", NA, NA, "Name2", NA, NA),
Col2 = c("Data", "Data", "Data", "Data", "Data", "Data")), .Names = c("Col1",
"Col2"), class = "data.frame", row.names = c(NA, -6L))
df
zoo::na.locf(df$Col1)
df$Col1 <- zoo::na.locf(df$Col1)
df
?subset
?with
?rep.int
?strwrap
3900 / 50872
3597/44883
num <- c(1, 2)
fib <- function(x) {
last2 <- sum(tail(x,2))
while (last2 <= 4000000) {
x <- append(x, last2)
last2 <- sum(tail(x,2))
}
return(x)
}
fib(num)
fib2 <- function(bound) {
fib <- integer(100)
fib[1:2] = 1L
counter = 2
while(fib[counter] < bound) {
counter = counter + 1
fib[counter] = fib[counter - 1] + fib[counter - 2]
}
return(fib)
}
fib2(4e6)
fib2 <- function(bound) {
fib <- integer(100)
fib[1:2] = 1L
counter = 2
while(fib[counter] < bound) {
counter = counter + 1
fib[counter] = fib[counter - 1] + fib[counter - 2]
}
return(fib[1:counter])
}
fib2 <- function(bound) {
fib <- integer(1000)
fib[1:2] = 1L
counter = 2
while(fib[counter] < bound) {
counter = counter + 1
if (counter > length(fib)) fib <- c(fib, integer(1000))
fib[counter] = fib[counter - 1] + fib[counter - 2]
}
return(fib[1:counter])
}
fib2(4e6)
fib(c(1, 1))
system.time(fib2(4e6))
system.time(fib(c(1, 1)))
fib <- function(bound) {
x <- c(1, 1)
last2 <- sum(tail(x,2))
while (last2 <= bound) {
x <- append(x, last2)
last2 <- sum(tail(x,2))
}
return(x)
}
fib2 <- function(bound) {
fib <- integer(1000)
fib[1:2] = 1L
counter = 2
while(fib[counter] < bound) {
counter = counter + 1
if (counter > length(fib)) fib <- c(fib, integer(1000))
fib[counter] = fib[counter - 1] + fib[counter - 2]
}
return(fib[1:counter])
}
system.time(fib(4e7))
system.time(fib(4e8))
system.time(fib(4e9))
fib(4e9)
system.time(fib(4e12))
system.time(fib(4e15))
system.time(fib(4e20))
system.time(fib2(4e20))
system.time(fib2(4e12))
(fib(4e20))
?stringr::str_c
651/27116
789/27116
4789 / 44883
1081 / (1081 + 94+497+2273)
4789/44883
600851475143
sqrt(600851475143)
x <- "mpg"
mtcars[, x]
min(mtcars[x])
min(mtcars[[x]])
x <- mtcars[, c("cyl", "disp")]
x$cyl <- factor(x$cyl)
x
?model.matrix
models.frame(~ cyl + disp, data = x)
model.frame(~ cyl + disp, data = x)
mf <- model.frame(~ cyl + disp, data = x)
epxand.model.frame(mf)
expand.model.frame(mf)
?expand.grid
?lm
model.matrix(~ cyl + disp, data = x)
x <- samp(diamonds)
x <- pocr::samp(diamonds, 20)
head(mpg)
library(ggplot2)
head(mpg)
dim(mpg)
x <- samp(mpg, 20)
x <- pocr::samp(mpg, 20)
lapply(x, class)
head(x, 2)
xmm <- model.matrix(~ manufacturer + class + displ, data = x)
xmm
xmm <- model.matrix(~ manufacturer:class + displ, data = x)
names(xmm)
head(xmm)
c(1:5, rec = F)
c(1:5, recursive = F)
?c
as.Date("2013-02-05 08:00:00")
str(mtcars)
dput(mtcars$cyl)
str(mtcars$cyl)
str(iris$Species)
dput(iris$Species)
x
x <- pocr::samp(mtcars)
x
x[2, 2] <- NULL
?strftime
strptime(c("3/5/2001", "3/5/02"), format = "%m/%d/%y")
strptime(c("3/5/2001", "3/5/02"), format = "%m/%d/%Y")
.035*10
fortunes::fortune()
fortunes::fortune()
fortunes::fortune()
fortunes::fortune()
fortunes::fortune()
fortunes::fortune()
fortunes::fortune()
fortunes::fortune()
fortunes::fortune()
fortunes::fortune()
fortunes::fortune()
fortunes::fortune()
fortunes::fortune("pie chart")
fortunes::fortune("pie chart")
fortunes::fortune("pie chart")
fortunes::fortune("pie chart", showMatches = T)
?predict.glm
grepl(letters, "a'")
grepl("a", letters)
?subset
library(data.table)
DT <- data.table(pattern=c("A", "A & B", "A & B & C", "A & C & D"),
value1=c(1, 2, 3, 4),
value2=c(5, 6, 7, 8)
)
DT.orig <- data.table(pattern=c("A", "A & B", "A & B & C", "A & C & D"),
value1=c(1, 2, 3, 4),
value2=c(5, 6, 7, 8)
)
DT <- DT.org
setkey(DT,pattern)
for(i in 1:nrow(DT)) {
DT[i, foo:=DT[grepl(gsub("&",".*",DT[i]$pattern,fixed=TRUE),pattern) & nchar(DT[i]$pattern)!=nchar(pattern),
min(DT[i]$value1*DT[i]$value2 - value1*value2)]]
}
DT.orig <- data.table(pattern=c("A", "A & B", "A & B & C", "A & C & D"),
value1=c(1, 2, 3, 4),
value2=c(5, 6, 7, 8)
)
DT <- DT.org
library(data.table)
DT.orig <- data.table(pattern=c("A", "A & B", "A & B & C", "A & C & D"),
value1=c(1, 2, 3, 4),
value2=c(5, 6, 7, 8)
)
DT <- DT.orig
setkey(DT,pattern)
for(i in 1:nrow(DT)) {
DT[i, foo:=DT[grepl(gsub("&",".*",DT[i]$pattern,fixed=TRUE),pattern) & nchar(DT[i]$pattern)!=nchar(pattern),
min(DT[i]$value1*DT[i]$value2 - value1*value2)]]
}
DT
DT <- DT.orig
setkey(DT,pattern)
for(i in 1:nrow(DT)) {
DT[i, foo:=DT[grepl(gsub("&",".*",DT[i]$pattern,fixed=TRUE),pattern) & nchar(DT[i]$pattern)!=nchar(pattern),
(DT[i]$value1*DT[i]$value2 - value1*value2)]]
}
c("a)
"
)
setwd("C:/Users/gregorp.NEBULA2/Desktop/GitHub/annual_report")
load("graph_dat.RData")
p(R_I)
pR_I
head(sp_rate_referrals_order_clean)
head(sp_rate_referrals_scrn_in_order_clean)
head(sp_rate_care_day_maltreatment_clean )
206 / 3192757 * 100000
(3192757 - 206) / 3192757 * 100000
1e5 - 6.452
